# Build the Templates and publish them to Github Pages

name: build
on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set environment
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}

      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
          architecture: 'x64'

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./requirements.txt

      - run: python3 build.py

      - name: Deploy to Github Pages (Development)
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3.7.0-8
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          publish_dir: ./build/templates
          destination_dir: ./development

      - name: Deploy to Github Pages (Stable)
        if: github.ref == 'refs/heads/stable'
        uses: peaceiris/actions-gh-pages@v3.7.0-8
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          publish_dir: ./build/templates
          destination_dir: ./stable

      - name: Deploy to Github Pages (Tagged)
        if: startsWith(github.ref,'refs/tags/v')
        uses: peaceiris/actions-gh-pages@v3.7.0-8
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          publish_dir: ./build/templates
          destination_dir: ./${{ env.RELEASE_VERSION }}

#  # If a tag is pushed starting with 'v' then we create a new release and attach the binary and documentation
#  release:
#    if: startsWith(github.ref,'refs/tags/v')
#    needs: [ build, documentation ]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - run: git fetch --prune --unshallow
#
#      - name: Download Binary Artifact
#        uses: actions/download-artifact@v1
#        with:
#          name: binary
#          path: build/binary
#
#      - name: Download Documentation Artifact
#        uses: actions/download-artifact@v1
#        with:
#          name: documentation
#          path: build/docs
#
#      - name: Create Release
#        # The since last release string will retrieve all commits since the last tag, else if none is found
#        # it will return from the start of history, then pretty it up to show single line logs for each entry
#        run: |
#          set -x
#          assets=()
#          for asset in ./build/binary/*.jar; do
#            assets+=("-a" "$asset")
#          done
#          #assets+=("-a" "build/docs/pdf/documentation.pdf#MyServer-Documentation.pdf")
#
#          tag_name="${GITHUB_REF##*/}"
#          hub release create \
#            "${assets[@]}" \
#            -F - \
#            "$tag_name" << EOF
#          Release $tag_name
#
#          # $(git log HEAD^..HEAD --pretty=format:'%s%n%n%b')
#
#          [Online Documentation](https://bundabrg.github.io/MyServer)
#
#          Since Last Release:
#          $(git log $(git describe --tags --abbrev=0 HEAD^ 2> /dev/null || git rev-list --max-parents=0 HEAD)..HEAD --graph --pretty=format:'%h %d %s [%an]' --abbrev-commit)
#          EOF
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
##      - name: Publish to SpigotMC
##        run: |
##          set -x
##          assets=()
##          for asset in ./build/binary/*.jar; do
##            assets+=("$asset")
##          done
##          tag_name="${GITHUB_REF##*/}"
##
##          docker login -u gitlab+deploy-token-5 -p ${DEPLOY_TOKEN} https://registry.worldguard.com.au
##          cat > config.yml << EOF
##          common:
##            spigot:
##              username: ${SPIGOT_USERNAME}
##              password: ${SPIGOT_PASSWORD}
##          EOF
##
##          docker run -i \
##            --shm-size=2g \
##            -v $(pwd)/config.yml:/app/config/config.yml \
##            -v $(pwd)/build:/app/build \
##            registry.worldguard.com.au/bgrieve/spigot_tools:latest app resource add-version \
##              geyserreversion.84301 \
##              ${assets[0]} \
##              ${tag_name} \
##              "Release ${tag_name}" << EOF
##          [plain]
##          Release $tag_name
##
##          $(git log HEAD^..HEAD --pretty=format:'%s%n%n%b')
##
##          Since Last Release:
##          $(git log $(git describe --tags --abbrev=0 HEAD^ 2> /dev/null || git rev-list --max-parents=0 HEAD)..HEAD --graph --pretty=format:'%h %d %s [%an]' --abbrev-commit)
##          [/plain]
##          EOF
##        env:
##          DEPLOY_TOKEN: ${{ secrets.GITLAB_DEPLOY_TOKEN }}
##          SPIGOT_USERNAME: ${{ secrets.SPIGOT_USERNAME }}
##          SPIGOT_PASSWORD: ${{ secrets.SPIGOT_PASSWORD }}